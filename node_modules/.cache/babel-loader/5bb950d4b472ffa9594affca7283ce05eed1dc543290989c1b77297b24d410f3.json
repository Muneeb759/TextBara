{"ast":null,"code":"import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function About(props) {\n  console.log(\"props\", props);\n  // const [mode, setmode] = useState(\"light\");\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n  // <div\n  //   className={`container ${props.mode}`}\n  //   // style={{ backgroundColor: props.mode === \"light\" ? \"grey\" : \"white\" }}\n  //   onClick={props.togglemode}\n  // >\n  //   <h2>About us</h2>\n  //   <div\n  //     className={`accordion ${props.mode}`}\n  //     id=\"accordionExample\"\n  //     style={{ backgroundColor: props.mode === \"light\" ? \"black\" : \"white\" }}\n  //   >\n  //     <div className=\"accordion-item\">\n  //       <h2 className=\"accordion-header\">\n  //         <button\n  //           className={`accordion-button ${props.mode}`}\n  //           type=\"button\"\n  //           data-bs-toggle=\"collapse\"\n  //           data-bs-target=\"#collapseOne\"\n  //           aria-expanded=\"true\"\n  //           aria-controls=\"collapseOne\"\n  //           style={{\n  //             backgroundColor: props.mode === \"light\" ? \"black\" : \"white\",\n  //             // Color: props.mode === \"light\" ? \"white\" : \"grey\",\n  //           }}\n  //           // onClick={props.toggleMode}\n  //         >\n  //           Accordion Item #1\n  //         </button>\n  //       </h2>\n  //       <div\n  //         id=\"collapseOne\"\n  //         className={`accordion-collapse collapse show ${props.mode}`}\n  //         data-bs-parent=\"#accordionExample\"\n  //         style={{\n  //           backgroundColor: props.mode === \"light\" ? \"black\" : \"white\",\n  //         }}\n  //       >\n  //         {/* Accordion 1 body */}\n  //         <div className=\"accordion-body\">\n  //           <strong>This is the first item's accordion body.</strong> It is\n  //           shown by default, until the collapse plugin adds the appropriate\n  //           classNamees that we use to style each element. These classNamees\n  //           control the overall appearance, as well as the showing and hiding\n  //           via CSS transitions. You can modify any of this with custom CSS or\n  //           overriding our default variables. It's also worth noting that just\n  //           about any HTML can go within the <code>.accordion-body</code>,\n  //           though the transition does limit overflow.\n  //         </div>\n  //       </div>\n  //     </div>\n  //     <div className=\"accordion-item\">\n  //       <h2 className=\"accordion-header\">\n  //         <button\n  //           className=\"accordion-button collapsed\"\n  //           style={{\n  //             backgroundColor: props.mode === \"light\" ? \"black\" : \"white\",\n  //           }}\n  //           type=\"button\"\n  //           data-bs-toggle=\"collapse\"\n  //           data-bs-target=\"#collapseTwo\"\n  //           aria-expanded=\"false\"\n  //           aria-controls=\"collapseTwo\"\n  //         >\n  //           Accordion Item #2\n  //         </button>\n  //       </h2>\n  //       <div\n  //         id=\"collapseTwo\"\n  //         className=\"accordion-collapse collapse\"\n  //         data-bs-parent=\"#accordionExample\"\n  //       >\n  //         {/* Accordion 2 body */}\n  //         <div\n  //           className=\"accordion-body\"\n  //           style={{\n  //             backgroundColor: props.mode === \"light\" ? \"black\" : \"white\",\n  //           }}\n  //         >\n  //           <strong>This is the second item's accordion body.</strong> It is\n  //           hidden by default, until the collapse plugin adds the appropriate\n  //           classNamees that we use to style each element. These classNamees\n  //           control the overall appearance, as well as the showing and hiding\n  //           via CSS transitions. You can modify any of this with custom CSS or\n  //           overriding our default variables. It's also worth noting that just\n  //           about any HTML can go within the <code>.accordion-body</code>,\n  //           though the transition does limit overflow.\n  //         </div>\n  //       </div>\n  //     </div>\n  //     <div className=\"accordion-item\">\n  //       <h2 className=\"accordion-header\">\n  //         <button\n  //           className=\"accordion-button collapsed \"\n  //           // mode={mode}\n  //           style={{\n  //             backgroundColor: props.mode === \"light\" ? \"black\" : \"white\",\n\n  //             // color: props.mode === \"light\" ? \"black\" : \"white\",\n  //           }}\n  //           type=\"button\"\n  //           data-bs-toggle=\"collapse\"\n  //           data-bs-target=\"#collapseThree\"\n  //           aria-expanded=\"false\"\n  //           aria-controls=\"collapseThree\"\n  //           onClick={props.toggleMode}\n  //         >\n  //           Accordion Item #3\n  //         </button>\n  //       </h2>\n  //       <div\n  //         id=\"collapseThree\"\n  //         className=\"accordion-collapse collapse\"\n  //         style={{\n  //           backgroundColor: props.mode === \"light\" ? \"black\" : \"white\",\n  //         }}\n  //         data-bs-parent=\"#accordionExample\"\n  //       >\n  //         {/* Accordion 3 body */}\n  //         <div\n  //           className=\"accordion-body\"\n  //           style={props.mode}\n  //           onClick={props.togglemode}\n  //         >\n  //           <strong>This is the third item's accordion body.</strong> It is\n  //           hidden by default, until the collapse plugin adds the appropriate\n  //           classNamees that we use to style each element. These classNamees\n  //           control the overall appearance, as well as the showing and hiding\n  //           via CSS transitions. You can modify any of this with custom CSS or\n  //           overriding our default variables. It's also worth noting that just\n  //           about any HTML can go within the <code>.accordion-body</code>,\n  //           though the transition does limit overflow.\n  //         </div>\n  //       </div>\n  //     </div>\n  //   </div>\n  // </div>\n  ;\n}\n_c = About;\nvar _c;\n$RefreshReg$(_c, \"About\");","map":{"version":3,"names":["React","useState","Link","Fragment","_Fragment","jsxDEV","_jsxDEV","About","props","console","log","_c","$RefreshReg$"],"sources":["/home/osama/Muneeb/React/TextUtils/src/components(TextUtils)/About.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default function About(props) {\n  console.log(\"props\", props);\n  // const [mode, setmode] = useState(\"light\");\n\n  return (\n    <></>\n    // <div\n    //   className={`container ${props.mode}`}\n    //   // style={{ backgroundColor: props.mode === \"light\" ? \"grey\" : \"white\" }}\n    //   onClick={props.togglemode}\n    // >\n    //   <h2>About us</h2>\n    //   <div\n    //     className={`accordion ${props.mode}`}\n    //     id=\"accordionExample\"\n    //     style={{ backgroundColor: props.mode === \"light\" ? \"black\" : \"white\" }}\n    //   >\n    //     <div className=\"accordion-item\">\n    //       <h2 className=\"accordion-header\">\n    //         <button\n    //           className={`accordion-button ${props.mode}`}\n    //           type=\"button\"\n    //           data-bs-toggle=\"collapse\"\n    //           data-bs-target=\"#collapseOne\"\n    //           aria-expanded=\"true\"\n    //           aria-controls=\"collapseOne\"\n    //           style={{\n    //             backgroundColor: props.mode === \"light\" ? \"black\" : \"white\",\n    //             // Color: props.mode === \"light\" ? \"white\" : \"grey\",\n    //           }}\n    //           // onClick={props.toggleMode}\n    //         >\n    //           Accordion Item #1\n    //         </button>\n    //       </h2>\n    //       <div\n    //         id=\"collapseOne\"\n    //         className={`accordion-collapse collapse show ${props.mode}`}\n    //         data-bs-parent=\"#accordionExample\"\n    //         style={{\n    //           backgroundColor: props.mode === \"light\" ? \"black\" : \"white\",\n    //         }}\n    //       >\n    //         {/* Accordion 1 body */}\n    //         <div className=\"accordion-body\">\n    //           <strong>This is the first item's accordion body.</strong> It is\n    //           shown by default, until the collapse plugin adds the appropriate\n    //           classNamees that we use to style each element. These classNamees\n    //           control the overall appearance, as well as the showing and hiding\n    //           via CSS transitions. You can modify any of this with custom CSS or\n    //           overriding our default variables. It's also worth noting that just\n    //           about any HTML can go within the <code>.accordion-body</code>,\n    //           though the transition does limit overflow.\n    //         </div>\n    //       </div>\n    //     </div>\n    //     <div className=\"accordion-item\">\n    //       <h2 className=\"accordion-header\">\n    //         <button\n    //           className=\"accordion-button collapsed\"\n    //           style={{\n    //             backgroundColor: props.mode === \"light\" ? \"black\" : \"white\",\n    //           }}\n    //           type=\"button\"\n    //           data-bs-toggle=\"collapse\"\n    //           data-bs-target=\"#collapseTwo\"\n    //           aria-expanded=\"false\"\n    //           aria-controls=\"collapseTwo\"\n    //         >\n    //           Accordion Item #2\n    //         </button>\n    //       </h2>\n    //       <div\n    //         id=\"collapseTwo\"\n    //         className=\"accordion-collapse collapse\"\n    //         data-bs-parent=\"#accordionExample\"\n    //       >\n    //         {/* Accordion 2 body */}\n    //         <div\n    //           className=\"accordion-body\"\n    //           style={{\n    //             backgroundColor: props.mode === \"light\" ? \"black\" : \"white\",\n    //           }}\n    //         >\n    //           <strong>This is the second item's accordion body.</strong> It is\n    //           hidden by default, until the collapse plugin adds the appropriate\n    //           classNamees that we use to style each element. These classNamees\n    //           control the overall appearance, as well as the showing and hiding\n    //           via CSS transitions. You can modify any of this with custom CSS or\n    //           overriding our default variables. It's also worth noting that just\n    //           about any HTML can go within the <code>.accordion-body</code>,\n    //           though the transition does limit overflow.\n    //         </div>\n    //       </div>\n    //     </div>\n    //     <div className=\"accordion-item\">\n    //       <h2 className=\"accordion-header\">\n    //         <button\n    //           className=\"accordion-button collapsed \"\n    //           // mode={mode}\n    //           style={{\n    //             backgroundColor: props.mode === \"light\" ? \"black\" : \"white\",\n\n    //             // color: props.mode === \"light\" ? \"black\" : \"white\",\n    //           }}\n    //           type=\"button\"\n    //           data-bs-toggle=\"collapse\"\n    //           data-bs-target=\"#collapseThree\"\n    //           aria-expanded=\"false\"\n    //           aria-controls=\"collapseThree\"\n    //           onClick={props.toggleMode}\n    //         >\n    //           Accordion Item #3\n    //         </button>\n    //       </h2>\n    //       <div\n    //         id=\"collapseThree\"\n    //         className=\"accordion-collapse collapse\"\n    //         style={{\n    //           backgroundColor: props.mode === \"light\" ? \"black\" : \"white\",\n    //         }}\n    //         data-bs-parent=\"#accordionExample\"\n    //       >\n    //         {/* Accordion 3 body */}\n    //         <div\n    //           className=\"accordion-body\"\n    //           style={props.mode}\n    //           onClick={props.togglemode}\n    //         >\n    //           <strong>This is the third item's accordion body.</strong> It is\n    //           hidden by default, until the collapse plugin adds the appropriate\n    //           classNamees that we use to style each element. These classNamees\n    //           control the overall appearance, as well as the showing and hiding\n    //           via CSS transitions. You can modify any of this with custom CSS or\n    //           overriding our default variables. It's also worth noting that just\n    //           about any HTML can go within the <code>.accordion-body</code>,\n    //           though the transition does limit overflow.\n    //         </div>\n    //       </div>\n    //     </div>\n    //   </div>\n    // </div>\n  );\n}\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,IAAI,QAAQ,kBAAkB;AAAC,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAExC,eAAe,SAASC,KAAKA,CAACC,KAAK,EAAE;EACnCC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEF,KAAK,CAAC;EAC3B;;EAEA,oBACEF,OAAA,CAAAF,SAAA,muBJ,KAAK;AAAA,IAAAI,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}