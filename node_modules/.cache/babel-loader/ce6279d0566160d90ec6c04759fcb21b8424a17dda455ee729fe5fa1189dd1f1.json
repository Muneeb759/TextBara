{"ast":null,"code":"var _jsxFileName = \"/home/osama/Muneeb/React/TextUtils/src/components(TextUtils)/About.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function About() {\n  _s();\n  const [myStyle, setMyStyle] = useState({\n    color: \"black\",\n    backgroundColor: \"white\"\n  });\n  const [mode, setmode] = useState(\"light\");\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setmode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark mode has been enabled!\", \"success\");\n      document.title = \"TextUtils - Darkmode\";\n    } else {\n      setmode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled!\", \"success\");\n      document.title = \"TextUtils - Lightmode\";\n    }\n  };\n\n  // const [btnText, setbtnText] = useState(\"Enable Dark Mode\");\n\n  const toggleStyle = () => {\n    if (myStyle.color === \"white\") {\n      setMyStyle({\n        color: \"black\",\n        backgroundColor: \"white\"\n      });\n      // setbtnText(\"Enable Dark Mode\");\n    } else {\n      setMyStyle({\n        color: \"white\",\n        backgroundColor: \"#042743\"\n      });\n      // setbtnText(\"Enable Light Mode\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    style: myStyle,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"About us\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"accordion \",\n      id: \"accordionExample\",\n      style: myStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"accordion-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"accordion-header\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"accordion-button\",\n            type: \"button\",\n            \"data-bs-toggle\": \"collapse\",\n            \"data-bs-target\": \"#collapseOne\",\n            \"aria-expanded\": \"true\",\n            \"aria-controls\": \"collapseOne\",\n            style: myStyle,\n            children: \"Accordion Item #1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"collapseOne\",\n          className: \"accordion-collapse collapse show\",\n          \"data-bs-parent\": \"#accordionExample\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"accordion-body\",\n            style: myStyle,\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"This is the first item's accordion body.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 15\n            }, this), \" It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the, though the transition does limit overflow.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"accordion-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"accordion-header\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"accordion-button collapsed\",\n            style: myStyle,\n            type: \"button\",\n            \"data-bs-toggle\": \"collapse\",\n            \"data-bs-target\": \"#collapseTwo\",\n            \"aria-expanded\": \"false\",\n            \"aria-controls\": \"collapseTwo\",\n            children: \"Accordion Item #2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"collapseTwo\",\n          className: \"accordion-collapse collapse\",\n          \"data-bs-parent\": \"#accordionExample\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"accordion-body\",\n            style: myStyle,\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"This is the first item's accordion body.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 15\n            }, this), \" It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the, though the transition does limit overflow.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"accordion-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"accordion-header\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"accordion-button collapsed \",\n            style: myStyle,\n            type: \"button\",\n            \"data-bs-toggle\": \"collapse\",\n            \"data-bs-target\": \"#collapseThree\",\n            \"aria-expanded\": \"false\",\n            \"aria-controls\": \"collapseThree\",\n            children: \"Accordion Item #3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"collapseThree\",\n          className: \"accordion-collapse collapse\",\n          style: myStyle,\n          \"data-bs-parent\": \"#accordionExample\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"accordion-body\",\n            style: myStyle,\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"This is the first item's accordion body.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 15\n            }, this), \" It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the, though the transition does limit overflow.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(About, \"SL4BkBn0inKSiGOFrov8xyCJ4co=\");\n_c = About;\nvar _c;\n$RefreshReg$(_c, \"About\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","About","_s","myStyle","setMyStyle","color","backgroundColor","mode","setmode","toggleMode","document","body","style","showAlert","title","toggleStyle","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","type","_c","$RefreshReg$"],"sources":["/home/osama/Muneeb/React/TextUtils/src/components(TextUtils)/About.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nexport default function About() {\n  const [myStyle, setMyStyle] = useState({\n    color: \"black\",\n    backgroundColor: \"white\",\n  });\n  const [mode, setmode] = useState(\"light\");\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setmode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark mode has been enabled!\", \"success\");\n      document.title = \"TextUtils - Darkmode\";\n    } else {\n      setmode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled!\", \"success\");\n      document.title = \"TextUtils - Lightmode\";\n    }\n  };\n\n  // const [btnText, setbtnText] = useState(\"Enable Dark Mode\");\n\n  const toggleStyle = () => {\n    if (myStyle.color === \"white\") {\n      setMyStyle({\n        color: \"black\",\n        backgroundColor: \"white\",\n      });\n      // setbtnText(\"Enable Dark Mode\");\n    } else {\n      setMyStyle({\n        color: \"white\",\n        backgroundColor: \"#042743\",\n      });\n      // setbtnText(\"Enable Light Mode\");\n    }\n  };\n\n  return (\n    <div className=\"container\" style={myStyle}>\n      <h2>About us</h2>\n      <div className=\"accordion \" id=\"accordionExample\" style={myStyle}>\n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\">\n            <button\n              className=\"accordion-button\"\n              type=\"button\"\n              data-bs-toggle=\"collapse\"\n              data-bs-target=\"#collapseOne\"\n              aria-expanded=\"true\"\n              aria-controls=\"collapseOne\"\n              style={myStyle}\n            >\n              Accordion Item #1\n            </button>\n          </h2>\n          <div\n            id=\"collapseOne\"\n            className=\"accordion-collapse collapse show\"\n            data-bs-parent=\"#accordionExample\"\n          >\n            <div className=\"accordion-body\" style={myStyle}>\n              <strong>This is the first item's accordion body.</strong> It is\n              shown by default, until the collapse plugin adds the appropriate\n              classNamees that we use to style each element. These classNamees\n              control the overall appearance, as well as the showing and hiding\n              via CSS transitions. You can modify any of this with custom CSS or\n              overriding our default variables. It's also worth noting that just\n              about any HTML can go within the, though the transition does limit\n              overflow.\n            </div>\n          </div>\n        </div>\n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\">\n            <button\n              className=\"accordion-button collapsed\"\n              style={myStyle}\n              type=\"button\"\n              data-bs-toggle=\"collapse\"\n              data-bs-target=\"#collapseTwo\"\n              aria-expanded=\"false\"\n              aria-controls=\"collapseTwo\"\n            >\n              Accordion Item #2\n            </button>\n          </h2>\n          <div\n            id=\"collapseTwo\"\n            className=\"accordion-collapse collapse\"\n            data-bs-parent=\"#accordionExample\"\n          >\n            <div className=\"accordion-body\" style={myStyle}>\n              <strong>This is the first item's accordion body.</strong> It is\n              shown by default, until the collapse plugin adds the appropriate\n              classNamees that we use to style each element. These classNamees\n              control the overall appearance, as well as the showing and hiding\n              via CSS transitions. You can modify any of this with custom CSS or\n              overriding our default variables. It's also worth noting that just\n              about any HTML can go within the, though the transition does limit\n              overflow.\n            </div>\n          </div>\n        </div>\n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\">\n            <button\n              className=\"accordion-button collapsed \"\n              style={myStyle}\n              type=\"button\"\n              data-bs-toggle=\"collapse\"\n              data-bs-target=\"#collapseThree\"\n              aria-expanded=\"false\"\n              aria-controls=\"collapseThree\"\n            >\n              Accordion Item #3\n            </button>\n          </h2>\n          <div\n            id=\"collapseThree\"\n            className=\"accordion-collapse collapse\"\n            style={myStyle}\n            data-bs-parent=\"#accordionExample\"\n          >\n            <div className=\"accordion-body\" style={myStyle}>\n              <strong>This is the first item's accordion body.</strong> It is\n              shown by default, until the collapse plugin adds the appropriate\n              classNamees that we use to style each element. These classNamees\n              control the overall appearance, as well as the showing and hiding\n              via CSS transitions. You can modify any of this with custom CSS or\n              overriding our default variables. It's also worth noting that just\n              about any HTML can go within the, though the transition does limit\n              overflow.\n            </div>\n          </div>\n        </div>\n      </div>\n      {/* <div className=\"container\"> */}\n        {/* <button\n          onClick={toggleStyle}\n          type=\"button\"\n          className=\"btn btn-primary my-2\"\n        >\n          {/* {btnText} */}\n        {/* </button> */} \n      {/* </div> */}\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}